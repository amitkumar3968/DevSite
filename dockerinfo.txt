Docker -- info--
  
  Docker -- 4 Beginners
 
https://docker-curriculum.com/


1. install docker


docker ps
docker images  -> list of docker images.

You can use the docker images command to see a list of all images on your system.
The docker ps command shows you all containers that are currently running.

docker ps -a

$ docker run busybox -> run docker image named busybody on your system.

Running the run command with the -it flags attaches us to an interactive tty in the container.

exit running container by typing exit and enter. OR ctrd+d 

images are like binaries, container is used to run/execute that image, saves local data in the container, and docker removes container data, when container is closed.

docker container prune - delete all stopped containers

also- docker rmi busybox  -> will remove image

docker run --rm prakhar1989/static-site   -> --rm flag automatically removes the container when it exits
Hit Ctrl+C to stop the container.



docker run -d -P --name static-site prakhar1989/static-site
In the above command, -d will detach our terminal, -P will publish all exposed ports to random ports and finally --name corresponds to a name we want to give. Now we can see the ports by running the docker port [CONTAINER] command


docker stop static

docker build -t image-name .
docker run image-name

docker images
docker rmi imagenameorImageID

docker container prune
docker ps -a


docker run -p 4000:8080 myapp





redis,mongodb , mysql


JS, python, clojure
express , node js


docker , aws


Rust is the most loved programming language among our respondents, followed close behind by Python, the fastest-growing major language today.

React.js and Vue.js are both the most loved and most wanted web frameworks by developers, 


Globally, respondents who use Clojure, F#, Elixir, and Rust earn the highest salaries, with median salaries above $70,000 USD. There are regional variations in which languages are associated with the highest pay. Scala developers in the US are among the highest paid, while Clojure and Rust developers earn the most in India.


engineering manager
DevOps , site reliability


docker stop container
docker tag devsite amitkumar3968/devsite:latest
docker login
docker push devsite amitkumar3968/devsite:latest


#MONGO----------------

loopback, meteor , laravel 


mongo

mongo shell - cli,
mongo compass - gui ,

https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x-tarball/
  
Dwld Mongo binaries from home site
mongorestore
bsondump
install_compass
mongo
mongod
mongodump
mongoexport
mongofiles
mongoimport
mongoreplay
mongos
mongostat
mongotop

extract & paste in /usr/local/bin

sudo mkdir -p /data/db
chmod 777 /data/db
mongod -> enter  - starts mongo server
mongo   -> start mongo cli

https://docs.mongodb.com/manual/mongo/

mongo shell commands--
db  - it shows current db
show dbs - list all dis
use local --- switch to local db.

db.mycollection.insertOne({x:1});
show collections
db.inventory.find().pretty()

db.inventory.find( { status: { $in: [ "A", "D" ] } } ) // finds A or D
db.inventory.find( { status: "A", qty: { $lt: 30 } } )

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                Adding mongo shell test commands.
----------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------

> db.userscollections.find().pretty()

> db.userscollections.insert({
...   "users": [
...     {
...       "username": "username1",
...       "email": "useremail1@email.com",
...       "phone": "12132131",
...       "region": "IN",
...       "country": "IN",
...       "imageurl": "theimageurl1"
...     }
...   ]
... })

db.userscollections.insert({
...   "users": [
...     {
...       "username": "username2",
...       "email": "useremail2@email.com",
...       "phone": "12132132",
...       "region": "IN",
...       "country": "IN",
...       "imageurl": "theimageurl2"
...     }
...   ]
... })



> db.userscollections.find({_id:ObjectId("5cc2dd2b7c63c8ee8a8a0b83")})
> db.userscollections.find( {"users.username":"username"}).pretty()

db.userscollections.update({"users.username":"username"},{$set:{"users.0.username":"testusername"}})

var mycursor = db.userscollections.find({"users.username":"testusername"})

while(mycursor.hasNext()){
printjson(mycursor.next());
}


 

 

db.userscollections.find({"users.username":"username2"}).forEach(function(doc){
db.userscollections.update({_id:doc._id},{$set:{ "users.0.username" : "d"}})
})


If your query includes inner documents, then use quotes for them. Also, use quotes for querying String values



// need to check push -- below code not working
db.userscollections.find({"users.username":"d"}).forEach(function(doc){
 printjson(doc)
})




db.userscollections.find({"users.username":"d"}).forEach(function(doc){
db.userscollections.update({_id:doc.id},{$push:{
"doc.users":{
 $each:[
{
  "username": "t",
  "email": "t@email.com",
  "phone": "t12132131",
  "region": "IN",
  "country": "IN",
  "imageurl": "theimageurlt"
}
]
}
}})
}
)

var mycursor = db.userscollections.find({"users.username":"d"})

while(mycursor.hasNext()){
printjson(mycursor.next());
}



--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
                                  Redux info----
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
createstacknavigator
RN - architecture
asyncstorage- blacklist, whitelist


redux
redux saga
reducer

callback hell
callback pyramid of doom

You could also just whitelist or blacklist specific reducers with redux persist as documented on their README: github.com/rt2zz/redux-persist

RN launch date - march 2015
3 yrs in RN
topics-
promise
asyncstorage
redux
asyncstrorage with redux




asyncstorage is RN API for client-side data persistence in the form of key-value pairs.
AsyncStorage API is asynchronous, so each of its methods returns a Promise object and in case of error, an Error object.

A Promise is an object representing the eventual completion or failure of an asynchronous operation.


A Promise is in one of these states:

    pending: initial state, neither fulfilled nor rejected.
    fulfilled: meaning that the operation completed successfully.
    rejected: meaning that the operation failed.

A promise is said to be settled if it is either fulfilled or rejected, but not pending.

One of the great things about using promises is chaining.

Redux --
A predictable state container for JavaScript apps.

Redux is framework agnostic.

A reducer is a pure function that takes the previous state and an action as arguments and returns a new state.

reducers produce the state of your application.

Reducers are just pure functions that take the previous state and an action, and return the next state.
A pure function is one that returns the exact same output for the given input.


The only way to change the state is to emit an action, an object describing what happened.

Three Principles

Redux can be described in three fundamental principles:
Single source of truth
State is read-only
Changes are made with pure functions


https://medium.com/kuralabs-engineering/reactive-core-architecture-for-react-native-and-react-applications-d590daf4ef8a






 



 









